def merge_sort(arr):  
    if len(arr) > 1:  # Base case: if the array has more than one element  
        mid = len(arr) // 2  # Find the mid point to divide the array into two halves  
        left_half = arr[:mid]  # Left half  
        right_half = arr[mid:]  # Right half  

        # Recursively sort both halves  
        merge_sort(left_half)  
        merge_sort(right_half)  

        i = j = k = 0  # Initial indexes for left_half, right_half, and merged array  

        # Merging the two halves  
        while i < len(left_half) and j < len(right_half):  
            if left_half[i] < right_half[j]:  # If the left element is smaller  
                arr[k] = left_half[i]  
                i += 1  
            else:  # If the right element is smaller or equal  
                arr[k] = right_half[j]  
                j += 1  
            k += 1  

        # Check if any element was left in the left_half  
        while i < len(left_half):  
            arr[k] = left_half[i]  
            i += 1  
            k += 1  

        # Check if any element was left in the right_half  
        while j < len(right_half):  
            arr[k] = right_half[j]  
            j += 1  
            k += 1  

# Function to get user input  
def get_user_input():  
    user_input = input("Enter a list of integers separated by spaces: ")  
    return list(map(int, user_input.split()))  

# Main function to run the Merge Sort  
if __name__ == "__main__":  
    arr = get_user_input()  
    print("Original array:", arr)  
    merge_sort(arr)  
    print("Sorted array:", arr)
